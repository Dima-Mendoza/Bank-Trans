import asyncio
import json
from datetime import datetime, time
from aiokafka import AIOKafkaConsumer, AIOKafkaProducer
from models import Transaction

BOOTSTRAP_SERVERS = [
    'localhost:19092',
    'localhost:10092',
    'localhost:11092',
]

class FraudDetector:
    @staticmethod
    def analyze(tx: Transaction) -> dict:
        alerts = []
        
        # –ü—Ä–∞–≤–∏–ª–æ 1: –ö—Ä—É–ø–Ω—ã–µ —Å—É–º–º—ã
        if (tx.currency == "RUB" and tx.amount > 300_000) or \
           (tx.currency in ["USD", "EUR"] and tx.amount > 4000) or \
           (tx.currency in ["BTC", "XMR"] and tx.amount > 2000):
            alerts.append("HIGH_AMOUNT")
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        crypto_currencies = ["XMR", "BTC", "USDT"]
        if tx.currency in crypto_currencies and tx.currency in ["BTC", "XMR"] and tx.amount > 2000:
            alerts.append("CRYPTO_CURRENCY")
        
        # –ü—Ä–∞–≤–∏–ª–æ 3: –ù–æ—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if tx.timestamp.time() < time(6, 0):
            alerts.append("NIGHT_OPERATION")
        
        # –ü—Ä–∞–≤–∏–ª–æ 4: –ß–∞—Å—Ç—ã–µ –º–∏–∫—Ä–æ—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if tx.microtransactions_count is not None and tx.microtransactions_count > 15:
            alerts.append("MICROTRANSACTIONS_FLOOD")

        return {
            "is_suspicious": bool(alerts),
            "alerts": alerts,
            "risk_score": len(alerts) * 25
        }

# async def create_topic_if_not_exists():
#     producer = AIOKafkaProducer(bootstrap_servers="localhost:9092")
#     await producer.start()
#     try:
#         topics = producer.client.cluster.topics()
#         if "transactions" not in topics:
#             print("–°–æ–∑–¥–∞—é —Ç–æ–ø–∏–∫ transactions...")
#             await producer.client.create_topic("transactions", 1, 1)
#     finally:
#         await producer.stop()

async def process_transactions():
    # await create_topic_if_not_exists()
    
    consumer = AIOKafkaConsumer(
        "transactions",
        bootstrap_servers=BOOTSTRAP_SERVERS,
        value_deserializer=lambda v: json.loads(v.decode("utf-8")),
        group_id="mvp-consumer-group",
        request_timeout_ms=3000,
        session_timeout_ms=10000,
        heartbeat_interval_ms=3000
    )
    
    await consumer.start()
    print("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Kafka")
    print("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–º—É: transactions")
    
    try:
        async for msg in consumer:
            try:
                tx_data = msg.value
                print(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_data['id']}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ datetime
                if 'timestamp' in tx_data:
                    tx_data['timestamp'] = datetime.fromisoformat(tx_data['timestamp'])
                
                tx = Transaction(**tx_data)
                result = FraudDetector.analyze(tx)
                
                if result["is_suspicious"]:
                    print(f"""
                    üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è [–†–∏—Å–∫: {result['risk_score']}%]
                    ID: {tx.id}
                    –°—É–º–º–∞: {tx.amount} {tx.currency}
                    –í—Ä–µ–º—è: {tx.timestamp}
                    –ü—Ä–∏—á–∏–Ω—ã: {", ".join(result['alerts'])}
                    """)
                    
            except json.JSONDecodeError as e:
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π JSON: {e} | –î–∞–Ω–Ω—ã–µ: {msg.value}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    finally:
        await consumer.stop()
        print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(process_transactions())

# BOOTSTRAP_SERVERS = [
#     'localhost:19092',
#     'localhost:10092',
#     'localhost:11092',
# ]

# TOPIC = "transactions"


# async def main():
#     consumer = AIOKafkaConsumer(
#         TOPIC,
#         bootstrap_servers=BOOTSTRAP_SERVERS,
#         group_id="mvp-consumer-group",
#         enable_auto_commit=True,
#         auto_offset_reset="earliest",
#         # request_timeout_ms=3000,
#         # session_timeout_ms=10000,
#         # heartbeat_interval_ms=3000
#     )

#     await consumer.start()
#     print(f"Subscribed to topic: {TOPIC}")
#     try:
#         async for msg in consumer:
#             try:
#                 raw_json = msg.value.decode("utf-8")
#                 tx = Transaction.model_validate_json(raw_json)
#                 print("Processed:", tx.model_dump())

#                 # —Å—é–¥–∞ –ø–æ—Ç–æ–º rule engine + –∑–∞–ø–∏—Å—å –≤ –ë–î
#             except Exception as e:
#                 print(f"Failed to parse message: {e}")
#     finally:
#         await consumer.stop()


# if __name__ == "__main__":
#     asyncio.run(main())
