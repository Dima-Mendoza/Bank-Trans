import asyncio
import json
from datetime import datetime, time
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.path.join(os.path.dirname(__file__), '.env.local'))

from aiokafka import AIOKafkaConsumer, AIOKafkaProducer
from models import Transaction
from alert_sender import MailtrapAlertSender  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ MailtrapAlertSender

class FraudDetector:
    @staticmethod
    def analyze(tx: Transaction) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –±–∞–∑–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º"""
        alerts = []
        
        # –ü—Ä–∞–≤–∏–ª–æ 1: –ö—Ä—É–ø–Ω—ã–µ —Å—É–º–º—ã
        if (tx.currency == "RUB" and tx.amount > 100_000) or \
           (tx.currency in ["USD", "EUR"] and tx.amount > 10_000):
            alerts.append("HIGH_AMOUNT")
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        crypto_currencies = ["XMR", "BTC", "USDT"]
        if tx.currency in crypto_currencies:
            alerts.append("CRYPTO_CURRENCY")
        
        # –ü—Ä–∞–≤–∏–ª–æ 3: –ù–æ—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if tx.timestamp.time() < time(6, 0) or tx.timestamp.time() > time(23, 59):
            alerts.append("NIGHT_OPERATION")
        
        # –ü—Ä–∞–≤–∏–ª–æ 4: –ß–∞—Å—Ç—ã–µ –º–∏–∫—Ä–æ—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if tx.microtransactions_count is not None and tx.microtransactions_count > 15:
            alerts.append("MICROTRANSACTIONS_FLOOD")

        return {
            "is_suspicious": bool(alerts),
            "alerts": alerts,
            "risk_score": len(alerts) * 25
        }

async def setup_processing_environment():
    producer = AIOKafkaProducer(bootstrap_servers="localhost:9092")
    await producer.start()
    try:
        topics = producer.client.cluster.topics()
        if "transactions" not in topics:
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
            await producer.client.create_topic("transactions", 1, 1)
    finally:
        await producer.stop()

async def process_transactions():
    await setup_processing_environment()
    
    consumer = AIOKafkaConsumer(
        "transactions",
        bootstrap_servers="localhost:9092",
        value_deserializer=lambda v: json.loads(v.decode("utf-8")),
        group_id="fraud-detection-system",
        request_timeout_ms=3000,
        session_timeout_ms=10000,
        heartbeat_interval_ms=3000
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    alert_sender = MailtrapAlertSender()
    
    await consumer.start()
    print("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
    print("–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    
    try:
        async for msg in consumer:
            try:
                tx_data = msg.value
                tx_data['timestamp'] = datetime.fromisoformat(tx_data['timestamp'])
                tx = Transaction(**tx_data)
                result = FraudDetector.analyze(tx)
                
                if result["is_suspicious"]:
                    print(f"""
                    üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è [–†–∏—Å–∫: {result['risk_score']}%]
                    ID: {tx.id}
                    –°—É–º–º–∞: {tx.amount:.2f} {tx.currency}
                    –í—Ä–µ–º—è: {tx.timestamp.strftime('%Y-%m-%d %H:%M:%S')}
                    –ü—Ä–∏—á–∏–Ω—ã: {", ".join(result['alerts'])}
                    """)
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–ª–µ—Ä—Ç–∞
                    tx_data_for_alert = {
                        'id': tx.id,
                        'amount': tx.amount,
                        'currency': tx.currency,
                        'timestamp': tx.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                        'ip': tx.ip if tx.ip else 'N/A'
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ email-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è
                    await alert_sender.send_alert(
                        tx_data_for_alert, 
                        result['alerts'], 
                        result['risk_score']
                    )
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    finally:
        await consumer.stop()
        print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(process_transactions())