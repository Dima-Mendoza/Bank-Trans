import aiosmtplib
import os
from dotenv import load_dotenv
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

load_dotenv(os.path.join(os.path.dirname(__file__), '.env.local'))

class SimpleAlertSender:
    async def send_alert(self, tx_data: dict, reasons: list, risk_score: int):
        alert_message = f"""
        üö® ALERT [Risk: {risk_score}%]
        ID: {tx_data['id']}
        Amount: {tx_data['amount']} {tx_data['currency']}
        Time: {tx_data['timestamp']}
        Reasons: {", ".join(reasons)}
        IP: {tx_data.get('ip', 'N/A')}
        """
        
        # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(alert_message)
        
        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        with open("fraud_alerts.log", "a", encoding="utf-8") as f:
            f.write(alert_message + "\n")
        
        print("Alert logged to file")

class MailtrapAlertSender:
    def __init__(self):
        self.smtp_host = os.getenv("SMTP_HOST", "sandbox.smtp.mailtrap.io")
        self.smtp_port = int(os.getenv("SMTP_PORT", 2525))
        self.smtp_user = os.getenv("SMTP_USER")
        self.smtp_password = os.getenv("SMTP_PASSWORD")
        self.sender_email = os.getenv("SENDER_EMAIL", "alerts@bank-trans.dev")
        self.receiver_email = os.getenv("RECEIVER_EMAIL", "security@example.com")

    async def send_alert(self, tx_data: dict, reasons: list, risk_score: int):
        if not all([self.smtp_user, self.smtp_password]):
            print("SMTP credentials not set. Email alerts disabled.")
            return

        # –°–æ–∑–¥–∞–µ–º MIME-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏ (—Ç–µ–∫—Å—Ç + HTML)
        msg = MIMEMultipart('alternative')
        msg["From"] = self.sender_email
        msg["To"] = self.receiver_email
        msg["Subject"] = f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è [–†–∏—Å–∫: {risk_score}%]"
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        text_body = f"""
        –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø
        
        ID: {tx_data['id']}
        –°—É–º–º–∞: {tx_data['amount']} {tx_data['currency']}
        –í—Ä–µ–º—è: {tx_data['timestamp']}
        IP: {tx_data.get('ip', 'N/A')}
        –†–∏—Å–∫: {risk_score}%
        –ü—Ä–∏—á–∏–Ω—ã: {", ".join(reasons)}
        
        –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —É—á–µ–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Bank-Trans.
        """
        part1 = MIMEText(text_body.strip(), "plain", "utf-8")
        
        # HTML-–≤–µ—Ä—Å–∏—è
        html_body = f"""
        <html>
          <body>
            <h2 style="color: #d9534f;">üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø</h2>
            <p>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ <b>Bank-Trans</b> –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:</p>
            <ul>
              <li><b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {tx_data['id']}</li>
              <li><b>–°—É–º–º–∞:</b> {tx_data['amount']} {tx_data['currency']}</li>
              <li><b>–í—Ä–µ–º—è:</b> {tx_data['timestamp']}</li>
              <li><b>IP-–∞–¥—Ä–µ—Å:</b> {tx_data.get('ip', 'N/A')}</li>
              <li><b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> <span style="color: red;">{risk_score}%</span></li>
              <li><b>–ü—Ä–∏—á–∏–Ω—ã:</b> {", ".join(reasons)}</li>
            </ul>
            <p><em>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —É—á–µ–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.</em></p>
          </body>
        </html>
        """
        part2 = MIMEText(html_body.strip(), "html", "utf-8")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg.attach(part1)
        msg.attach(part2)
        
        try:
            await aiosmtplib.send(
                msg,
                hostname=self.smtp_host,
                port=self.smtp_port,
                username=self.smtp_user,
                password=self.smtp_password,
                start_tls=True,
                use_tls=False
            )
            print(f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {self.receiver_email}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")